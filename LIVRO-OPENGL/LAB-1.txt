#include <GL/glu.h>
#include <GL/glut.h>

void MyInit()
{
    glClearColor(0,0,0,1);                       // FUNÇÃO PARAS AS CORES DA JANELA
    glColor3f(1,0,0);                            // RECEBE VALORES FLOAT PARA DAR COR A JANELA
}

void Face(GLfloat A[],GLfloat B[],GLfloat C[],GLfloat D[])
{
    glBegin(GL_POLYGON);                         // INICIA O RETANGULO
        glVertex3fv(A);                          // CADA PAR DE VALOR REPRESENTA AS COORDENADAS NO PLANO CARTESIANO
        glVertex3fv(B);
        glVertex3fv(C);
        glVertex3fv(D);
    glEnd();
}

void Cube(GLfloat V0[],GLfloat V1[],GLfloat V2[],GLfloat V3[],GLfloat V4[],GLfloat V5[],GLfloat V6[],GLfloat V7[])
{
    Face(V0,V1,V2,V3);
    Face(V5,V5,V6,V7);
}

void Draw()                                                 // FUNÇÃO CRIADA PARA ATENDER O PEDIDA DA OUTRA FUNÇÃO glutDisplayFunc(Draw);
{
    GLfloat V[8][3] = {
                                {-0.5, 0.5, 0.5},           // PONTOS DOS RETANGULOS COORDENADAS
                                { 0.5, 0.5, 0.5},
                                { 0.5,-0.5, 0.5},
                                {-0.5,-0.5, 0.5},

                                {-0.5, 0.5,-0.5},           // PONTOS DOS RETANGULOS COORDENADAS
                                { 0.5, 0.5,-0.5},
                                { 0.5,-0.5,-0.5},
                                {-0.5,-0.5,-0.5}
                             };
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);    // LIMPPANDO O BUFFER DA COR DE BACKGROUND

    Cube(V[0],V[1],V[2],V[3],V[4],V[5],V[6],V[7]);
    /** DESENHANDO UM RETANGULO **/
    //glPointSize(5);                            // TAMANHO DO RETANGULO
                                                 // TERMINA O RETANGULO
    glutSwapBuffers();                           // ATUALIZA OS PIXELS
}
int main(int C, char *V[])
{
    glutInit(&C,V);
    glutInitWindowPosition(250,50);              // POSIÇÃO DA JANELA
    glutInitWindowSize(600,600);                 // TAMANHO E LARGURA DA JANELA
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH); // A COMBINAÇÃO DESSAS DUAS CONSTANTES CRIA UM NOVO VALOR
    // INICIALIZANDO
    glutCreateWindow("LAB Program - 3 : CUBE IN SPIN");       // TITULO DA JANELA
    MyInit();                                    // CRIANDO NOSSA FUNÇÃO
    glutDisplayFunc(Draw);
    glutMainLoop();                              // FUNÇÃO OBRIGATORIA
    return 0;
}

// https://www.youtube.com/watch?v=wG_VaSr6a6c&t=1254s
// parada 20:55






// ***********************************************************************************************

// ###############################################################################################

// ******************************* CODIGO COMPLETO LAB-1.C ***************************************

#include <GL/glu.h>
#include <GL/glut.h>
GLfloat T = 0;                                   // CRIAMOS UMA VARIAVEL GLOBAL T

void Spin()
{
    T = T + 0.05;                                // VELOCIDADE DE ROTAÇÃO
    if(T > 360)
        T = 0;
    glutPostRedisplay();                         //
}

void MyInit()
{
    glClearColor(0,0,0,1);                       // FUNÇÃO PARAS AS CORES DA JANELA
    glColor3f(1,0,0);                            // RECEBE VALORES FLOAT PARA DAR COR A JANELA
    glEnable(GL_DEPTH_TEST);                     //
}

void Face(GLfloat A[],GLfloat B[],GLfloat C[],GLfloat D[])
{
    glBegin(GL_POLYGON);                         // INICIA O RETANGULO
        glVertex3fv(A);                          // CADA PAR DE VALOR REPRESENTA AS COORDENADAS NO PLANO CARTESIANO
        glVertex3fv(B);
        glVertex3fv(C);
        glVertex3fv(D);
    glEnd();
}

void Cube(GLfloat V0[],GLfloat V1[],GLfloat V2[],GLfloat V3[],GLfloat V4[],GLfloat V5[],GLfloat V6[],GLfloat V7[])
{
    glColor3f(1,0,0);
    Face(V0,V1,V2,V3);                                     // FACE FRONT

    glColor3f(0,1,0);                                      // FACE BACK
    Face(V4,V5,V6,V7);

    glColor3f(0,0,1);
    Face(V0,V3,V7,V4);                                     // FACE LEFT

    glColor3f(1,0,1);
    Face(V1,V2,V6,V5);                                     // FACE RIGHT

    glColor3f(1,1,0);
    Face(V0,V1,V5,V4);                                     // FACE TOP

    glColor3f(0,1,1);
    Face(V3,V2,V6,V7);                                     // FACE BOTTOM
}

void Draw()                                                 // FUNÇÃO CRIADA PARA ATENDER O PEDIDA DA OUTRA FUNÇÃO glutDisplayFunc(Draw);
{
    GLfloat V[8][3] = {
                                {-0.5, 0.5, 0.5},           // PONTOS DOS RETANGULOS COORDENADAS
                                { 0.5, 0.5, 0.5},
                                { 0.5,-0.5, 0.5},
                                {-0.5,-0.5, 0.5},

                                {-0.5, 0.5,-0.5},           // PONTOS DOS RETANGULOS COORDENADAS
                                { 0.5, 0.5,-0.5},
                                { 0.5,-0.5,-0.5},
                                {-0.5,-0.5,-0.5}
                             };
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);    // LIMPPANDO O BUFFER DA COR DE BACKGROUND

    glLoadIdentity();
    glRotatef(T,1,1,0);                                   // ANGULOS DE ROTAÇÃO

    Cube(V[0],V[1],V[2],V[3],V[4],V[5],V[6],V[7]);
    /** DESENHANDO UM RETANGULO **/
    //glPointSize(5);                                      // TAMANHO DO RETANGULO
                                                           // TERMINA O RETANGULO
    glutSwapBuffers();                                     // ATUALIZA OS PIXELS
}
int main(int C, char *V[])
{
    glutInit(&C,V);
    glutInitWindowPosition(250,50);              // POSIÇÃO DA JANELA
    glutInitWindowSize(600,600);                 // TAMANHO E LARGURA DA JANELA
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH); // A COMBINAÇÃO DESSAS DUAS CONSTANTES CRIA UM NOVO VALOR
    // INICIALIZANDO
    glutCreateWindow("LAB Program - 3 : CUBE IN SPIN");       // TITULO DA JANELA
    MyInit();                                    // CRIANDO NOSSA FUNÇÃO
    glutDisplayFunc(Draw);
    glutIdleFunc(Spin);
    glutMainLoop();                              // FUNÇÃO OBRIGATORIA
    return 0;
}

// https://www.youtube.com/watch?v=wG_VaSr6a6c&t=1254s
// parada 20:55




